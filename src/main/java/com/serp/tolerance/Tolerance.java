package com.serp.tolerance;

//==============================================================================
//   WARNING!!  This file is overwritten by the UIStyler each time the Styler
//   file is saved.
//
//       Filename:  Tol.java
//
//        This file was generated by the NX User Interface Styler
//        Created by: User
//        Version: NX 7.5
//              Date: 06-19-2022
//              Time: 14:10
//
//   This template file is overwritten each time the UIStyler dialog is
//   saved.  Any modifications to this file will be lost.
//==============================================================================


//==============================================================================
//  Purpose:  This TEMPLATE file contains JAVA source to guide you in the
//  construction of your NX Open application dialog. The generation of your
//  dialog file (.dlg extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlg).


//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your UIStyler dialog in NX
//      using APIs provided in nxopen.uistyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================


//------------------------------------------------------------------------------
// These imports are needed for the following template code
//------------------------------------------------------------------------------

import nxopen.*;
import nxopen.uf.UFConstants;
import nxopen.uistyler.*;
import org.springframework.stereotype.Service;

import java.rmi.RemoteException;

//------------------------------------------------------------------------------
// Represents UI Styler application class
//------------------------------------------------------------------------------
@Service
public class Tolerance implements DialogItem.Apply, DialogItem.Construct, DialogItem.Destruct, OptionMenu.Activate, PushButton.Activate {
    // class members
    public static Session theSession = null;
    public static UI theUI = null;
    static Tolerance theTol;
    nxopen.uistyler.Dialog theDialog;
    nxopen.uistyler.DialogItem dimDialog;
    nxopen.uistyler.LabelItem dimLabel0;
    nxopen.uistyler.OptionMenu dimOption1;
    nxopen.uistyler.OptionMenu dimOptionI1;
    nxopen.uistyler.OptionMenu dimOptionI2;
    nxopen.uistyler.OptionMenu dimOptionI3;
    nxopen.uistyler.Toggle dimToggle4;
    nxopen.uistyler.LabelItem dimLabel4;
    nxopen.uistyler.OptionMenu dimOptionLd1;
    nxopen.uistyler.OptionMenu dimOptionLd2;
    nxopen.uistyler.Toggle dimToggle9;
    nxopen.uistyler.OptionMenu dimOptionLd3;
    nxopen.uistyler.Separator dimSep5;
    nxopen.uistyler.LabelItem dimLabel6;
    nxopen.uistyler.OptionMenu dimOptionAt1;
    nxopen.uistyler.OptionMenu dimOptionAt2;
    nxopen.uistyler.Toggle dimToggle15;
    nxopen.uistyler.Separator dimSep9;
    nxopen.uistyler.LabelItem dimLabel15;
    nxopen.uistyler.OptionMenu dimOption18;
    nxopen.uistyler.OptionMenu dimOption19;
    nxopen.uistyler.OptionMenu dimOption17;
    nxopen.uistyler.Toggle dimToggle21;
    nxopen.uistyler.Separator dimSep21;
    nxopen.uistyler.PushButton dimAction11;
    static int isDisposeCalled;


    //------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
    public Tolerance() throws NXException, RemoteException {
        try {
            theSession = (Session) SessionFactory.get("Session");
            theUI = (UI) SessionFactory.get("UI");
            theDialog = theUI.styler().createStylerDialog("c:\\UGplot\\tol.dlg");
            initializeUIStylerDialog();
            isDisposeCalled = 0;
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }

    //------------------------------------------------------------------------------
// This method is required for UI styler dialog creation
//------------------------------------------------------------------------------
    private void initializeUIStylerDialog() throws NXException, RemoteException {
        try {
            //------------------------------------------------------------------------------
            // The following code snippets initializes all the styler items and associate
            // respective callbacks. Attributes of the styler item can be accessed and
            // modified only after calling Show() or RegisterWithUiMenu().
            //------------------------------------------------------------------------------
            dimDialog = (nxopen.uistyler.DialogItem) theDialog.getStylerItem("UF_STYLER_DIALOG_INDEX", nxopen.uistyler.Dialog.ItemType.DIALOG_ITEM);
            // Register the callback: consrtructor_cb
            dimDialog.addConstructHandler(this, false);
            // Register the callback: destructor_cb
            dimDialog.addDestructHandler(this, false);
            // Register the callback: apply_cb
            dimDialog.addApplyHandler(this, false);
            dimLabel0 = (nxopen.uistyler.LabelItem) theDialog.getStylerItem("LABEL_0", nxopen.uistyler.Dialog.ItemType.LABEL_ITEM);
            dimOption1 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_1", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: Hole
            dimOption1.addActivateHandler(this, false);
            dimOptionI1 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_I1", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_1
            dimOptionI1.addActivateHandler(this, false);
            dimOptionI2 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_I2", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_2
            dimOptionI2.addActivateHandler(this, false);
            dimOptionI3 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_I3", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_3
            dimOptionI3.addActivateHandler(this, false);
            dimToggle4 = (nxopen.uistyler.Toggle) theDialog.getStylerItem("TOGGLE_4", nxopen.uistyler.Dialog.ItemType.TOGGLE);
            dimLabel4 = (nxopen.uistyler.LabelItem) theDialog.getStylerItem("LABEL_4", nxopen.uistyler.Dialog.ItemType.LABEL_ITEM);
            dimOptionLd1 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_LD1", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_4
            dimOptionLd1.addActivateHandler(this, false);
            dimOptionLd2 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_LD2", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_5
            dimOptionLd2.addActivateHandler(this, false);
            dimToggle9 = (nxopen.uistyler.Toggle) theDialog.getStylerItem("TOGGLE_9", nxopen.uistyler.Dialog.ItemType.TOGGLE);
            dimOptionLd3 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_LD3", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_6
            dimOptionLd3.addActivateHandler(this, false);
            dimSep5 = (nxopen.uistyler.Separator) theDialog.getStylerItem("SEP_5", nxopen.uistyler.Dialog.ItemType.SEPARATOR);
            dimLabel6 = (nxopen.uistyler.LabelItem) theDialog.getStylerItem("LABEL_6", nxopen.uistyler.Dialog.ItemType.LABEL_ITEM);
            dimOptionAt1 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_AT1", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_7
            dimOptionAt1.addActivateHandler(this, false);
            dimOptionAt2 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_AT2", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_8
            dimOptionAt2.addActivateHandler(this, false);
            dimToggle15 = (nxopen.uistyler.Toggle) theDialog.getStylerItem("TOGGLE_15", nxopen.uistyler.Dialog.ItemType.TOGGLE);
            dimSep9 = (nxopen.uistyler.Separator) theDialog.getStylerItem("SEP_9", nxopen.uistyler.Dialog.ItemType.SEPARATOR);
            dimLabel15 = (nxopen.uistyler.LabelItem) theDialog.getStylerItem("LABEL_15", nxopen.uistyler.Dialog.ItemType.LABEL_ITEM);
            dimOption18 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_18", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_9
            dimOption18.addActivateHandler(this, false);
            dimOption19 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_19", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_9
            dimOption19.addActivateHandler(this, false);
            dimOption17 = (nxopen.uistyler.OptionMenu) theDialog.getStylerItem("OPTION_17", nxopen.uistyler.Dialog.ItemType.OPTION_MENU);
            // Register the callback: B_9
            dimOption17.addActivateHandler(this, false);
            dimToggle21 = (nxopen.uistyler.Toggle) theDialog.getStylerItem("TOGGLE_21", nxopen.uistyler.Dialog.ItemType.TOGGLE);
            dimSep21 = (nxopen.uistyler.Separator) theDialog.getStylerItem("SEP_21", nxopen.uistyler.Dialog.ItemType.SEPARATOR);
            dimAction11 = (nxopen.uistyler.PushButton) theDialog.getStylerItem("ACTION_11", nxopen.uistyler.Dialog.ItemType.PUSH_BUTTON);
            // Register the callback: action_11_act_cb
            dimAction11.addActivateHandler(this, false);
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }

    //------------------------------------------------------------------------------
    // This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public DialogResponse show() throws NXException, RemoteException {
        DialogResponse response = DialogResponse.OK;
        try {
            response = theDialog.show();
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return response;
    }

    //------------------------------------------------------------------------------
    // Following method disposes all the class members
    //------------------------------------------------------------------------------
    private void dispose() throws NXException, RemoteException {
        try {
            if (isDisposeCalled == 0) {
                dimDialog.dispose();
                dimLabel0.dispose();
                dimOption1.dispose();
                dimOptionI1.dispose();
                dimOptionI2.dispose();
                dimOptionI3.dispose();
                dimToggle4.dispose();
                dimLabel4.dispose();
                dimOptionLd1.dispose();
                dimOptionLd2.dispose();
                dimToggle9.dispose();
                dimOptionLd3.dispose();
                dimSep5.dispose();
                dimLabel6.dispose();
                dimOptionAt1.dispose();
                dimOptionAt2.dispose();
                dimToggle15.dispose();
                dimSep9.dispose();
                dimLabel15.dispose();
                dimOption18.dispose();
                dimOption19.dispose();
                dimOption17.dispose();
                dimToggle21.dispose();
                dimSep21.dispose();
                dimAction11.dispose();
                theDialog.dispose();
            }
            isDisposeCalled = 1;
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }

    // -------------------------- MENUBAR HOOKUP HELP Example ----------------------
    // To launch this dialog from a NX menubar, you must follow the steps below:


    //      1)Add the following lines to your MenuScript file in order to
    //        associate a menu bar button with your dialog.  In this
    //        example, a cascade menu will be created and will be
    //        located just before the Help button on the main menubar.
    //        The button, TOL_BTN is set up to launch your dialog and
    //        will be positioned as the first button on your pulldown menu.
    //        If you wish to add the button to an existing cascade, simply
    //        add the 3 lines between MENU LAUNCH_CASCADE and END_OF_MENU
    //        to your menuscript file.

    //        The MenuScript file requires an extension of ".men".
    //        Make sure that you add the extension to the file and place
    //        the file in your startup directory:
    //             $UGII_USER_DIR/startup or
    //             $UGII_SITE_DIR/startup or
    //             $UGII_VENDOR_DIR/startup directory

    //        Move the contents between the dashed lines to your Menuscript file.
    //        !-----------------------------------------------------------------------------
    //        VERSION 120
    //
    //        EDIT UG_GATEWAY_MAIN_MENUBAR
    //
    //        BEFORE UG_HELP
    //        CASCADE_BUTTON UISTYLER_DLG_CASCADE_BTN
    //        LABEL Dialog Launcher
    //        END_OF_BEFORE
    //
    //        MENU UISTYLER_DLG_CASCADE_BTN
    //        BUTTON TOL_BTN
    //        LABEL Display Tol dialog
    //        ACTIONS tol.dlg
    //        END_OF_MENU
    //        !-----------------------------------------------------------------------------

    //      2)Issue a call to the function, registerWithUiMenu() from the startup()
    //        user exit as shown below.
    //      3)Place your compiled and linked JAR or CLASS in
    //             $UGII_USER_DIR/startup or
    //             $UGII_SITE_DIR/startup or
    //             $UGII_VENDOR_DIR/startup directory.

    //       NOTE:  The shared libraries must contain the proper extension .jar or .class
    //       to make ensure that it is recognized by the MenuScript.  If it does not
    //       have the proper extension, it will NOT be recognized by MenuScript.

    //       The action name you have provided in your MenuScript must correspond to
    //       to the dialog name provided in the action structure.  This MUST match inorder
    //       to bind your dlg file to your MenuScript button.

    //      4)Copy your UIStyler dialog file to the proper directory.
    //        All dialog files (.dlg) must be located in
    //             $UGII_USER_DIR/application or
    //             $UGII_SITE_DIR/application or
    //             $UGII_VENDOR_DIR/application directory
    //------------------------------------------------------------------------------

    // Uncomment following startup() function if you want to run this
    // example thru MENUBAR HOOKUP

    /*
    public static void startup (String [] args)throws NXException, java.rmi.RemoteException
    {
        try
        {
            theTol = new Tol();
            // The following method registers the dialog with a menu item
            theTol.registerWithUiMenu();

        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    } // startup ends

    */

    //------------------------------------------------------------------------------
    // The flag "isTopDialog", informs menubar about the dialog location.
    // This flag MUST match the resource set in the dialog.
    // DO NOT ASSUME that changing this field will update the location of the dialog.
    // Please use the UIStyler to indicate the position of the dialog.
    //------------------------------------------------------------------------------
    public void registerWithUiMenu() throws NXException, RemoteException {
        try {
            boolean isTopDialog = false;
            theDialog.registerWithUiMenu(isTopDialog);
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }

    // --------------- DIALOG CREATION FROM A CALLBACK HELP Example -----------------
    // If you wish to have this dialog displayed from the callback of another
    // UIStyler dialog, you should:


    //      1)Make sure that the callback of your UIStyler dialog is
    //        designated as a dialog building callback.
    //      2)Your callback should issue a call to this method.


    // All dialog files must be located in
    //             $UGII_USER_DIR/application or
    //             $UGII_SITE_DIR/application or
    //             $UGII_VENDOR_DIR/application directory
    //------------------------------------------------------------------------------


    // Uncomment following function if you want to run this
    // example thru MENUBAR HOOKUP

    /*
    public static void <enter the name of your function> (String [] argv) throws Exception // enter the name of your method
    {
        try
        {
            DialogResponse response;
            theTol = new Tol();
            // The following method shows the dialog immediately
            response = theTol.show();
            theTol.dispose();
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }

    */

    //---------------- DIALOG CREATION FROM A USER EXIT HELP Example ---------------
    // An example is shown below to create this dialog from a user exit.
    // All dialog files must be located in
    //             $UGII_USER_DIR/application or
    //             $UGII_SITE_DIR/application or
    //             $UGII_VENDOR_DIR/application directory

    //      1)Add a user exit to the method name below, for example, main().
    //      2)Consider how your shared library will be unloaded.  Take a look
    //        at the method getUnloadOption().
    //------------------------------------------------------------------------------
    public void start() throws Exception
    // main() or  a valid user exit
    {
        try {
            DialogResponse response;
            theTol = new Tolerance();
            // The following method shows the dialog immediately
            response = theTol.show();
            theTol.dispose();
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    } // User exit ends

    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:


    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates

    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    public static final int getUnloadOption() {
        return BaseSession.LibraryUnloadOption.EXPLICITLY;
        // return BaseSession.LibraryUnloadOption.IMMEDIATELY;
        // return BaseSession.LibraryUnloadOption.AT_TERMINATION;
    }

    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void unloadLibrary() throws NXException, RemoteException {
        try {
            if (theTol == null) {
                theTol.dispose();
            }
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }


    //------------------------------------------------------------------------------
    //------------------------ UIStyler Event Implementation -----------------------
    //------------------------------------------------------------------------------


    public nxopen.uistyler.DialogState activate(nxopen.uistyler.StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        nxopen.uistyler.DialogState retValue = nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        try {
            if (e.getStylerItem().isEqualTo(dimOption1)) {
                retValue = Hole(e);
            }
            if (e.getStylerItem().isEqualTo(dimOptionI1)) {
                retValue = B_1(e);
            }
            if (e.getStylerItem().isEqualTo(dimOptionI2)) {
                retValue = B_2(e);
            }
            if (e.getStylerItem().isEqualTo(dimOptionI3)) {
                retValue = B_3(e);
            }
            if (e.getStylerItem().isEqualTo(dimOptionLd1)) {
                retValue = B_4(e);
            }
            if (e.getStylerItem().isEqualTo(dimOptionLd2)) {
                retValue = B_5(e);
            }
            if (e.getStylerItem().isEqualTo(dimOptionLd3)) {
                retValue = B_6(e);
            }
            if (e.getStylerItem().isEqualTo(dimOptionAt1)) {
                retValue = B_7(e);
            }
            if (e.getStylerItem().isEqualTo(dimOptionAt2)) {
                retValue = B_8(e);
            }
            if (e.getStylerItem().isEqualTo(dimOption18)) {
                retValue = B_9(e);
            }
            if (e.getStylerItem().isEqualTo(dimOption19)) {
                retValue = B_9(e);
            }
            if (e.getStylerItem().isEqualTo(dimOption17)) {
                retValue = B_9(e);
            }
            if (e.getStylerItem().isEqualTo(dimAction11)) {
                retValue = action_11_act_cb(e);
            }
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return retValue;
    }

    public nxopen.uistyler.DialogState apply(nxopen.uistyler.StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        nxopen.uistyler.DialogState retValue = nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        try {
            if (e.getStylerItem().isEqualTo(dimDialog)) {
                retValue = apply_cb(e);
            }
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return retValue;
    }

    public nxopen.uistyler.DialogState construct(nxopen.uistyler.StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        nxopen.uistyler.DialogState retValue = nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        try {
            if (e.getStylerItem().isEqualTo(dimDialog)) {
                retValue = consrtructor_cb(e);
            }
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return retValue;
    }

    public nxopen.uistyler.DialogState destruct(nxopen.uistyler.StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        nxopen.uistyler.DialogState retValue = nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        try {
            if (e.getStylerItem().isEqualTo(dimDialog)) {
                retValue = destructor_cb(e);
            }
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return retValue;
    }

    //------------------------------------------------------------------------------
    //------------------------- UIStyler Callback Functions ------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    // Callback Name: consrtructor_cb
    // Following callback is associated with the "dimDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------

    String ATextList1[] = {"None", "*", "**", "M", "<o>", "сфера"};
    int atl1Count = 6;
    String ATextList2[] = {"None", "*", "**", "спр.", "справ.", "повт.", "x30<$s>", "x45<$s>", "x0,75", "x1", "x1,25", "x1,5", "x2", "max", "min", "- ход", "- установ.", "- закр. высота"};
    int atl2Count = 18;
    String ATextList3[] = {"None", "отв.", "рад.", "фаски", "фасок", "фаска", "паза", "пазов", "паз", "места", "мест", "место", "по контуру", "= ="};
    int atl3_count = 14;

    public DialogState consrtructor_cb(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {
            // ---- Enter your callback code here -----
            SelectionHandle selectionHandle = dimDialog.getSelectionHandle();
            Selection.MaskTriple[] selectionMaskArray = new Selection.MaskTriple[15];

            for (int i = 0; i < selectionMaskArray.length; i++) {
                selectionMaskArray[i] = new Selection.MaskTriple();
                selectionMaskArray[i].type = UFConstants.UF_dimension_type;
                selectionMaskArray[i].solidBodySubtype = 0;
            }
            // Комбинацию масок см в файлах:
            // uf_object_types.h
            selectionMaskArray[0].subtype = UFConstants.UF_dim_horizontal_subtype;
            selectionMaskArray[1].subtype = UFConstants.UF_dim_cylindrical_subtype;
            selectionMaskArray[2].subtype = UFConstants.UF_dim_vertical_subtype;
            selectionMaskArray[3].subtype = UFConstants.UF_dim_parallel_subtype;
            selectionMaskArray[4].subtype = UFConstants.UF_dim_perpendicular_subtype;
            selectionMaskArray[5].subtype = UFConstants.UF_dim_angular_minor_subtype;
            selectionMaskArray[6].subtype = UFConstants.UF_dim_angular_major_subtype;
            selectionMaskArray[7].subtype = UFConstants.UF_dim_arc_length_subtype;
            selectionMaskArray[8].subtype = UFConstants.UF_dim_radius_subtype;
            selectionMaskArray[9].subtype = UFConstants.UF_dim_diameter_subtype;
            selectionMaskArray[10].subtype = UFConstants.UF_dim_hole_subtype;
            selectionMaskArray[11].subtype = UFConstants.UF_dim_conc_circle_subtype;
            selectionMaskArray[12].subtype = UFConstants.UF_dim_folded_radius_subtype;
            selectionMaskArray[13].subtype = UFConstants.UF_dim_ordinate_horiz_subtype;
            selectionMaskArray[14].subtype = UFConstants.UF_dim_ordinate_vert_subtype;

            theUI.selectionManager().setSelectionMask(
                    selectionHandle, Selection.SelectionAction.CLEAR_AND_ENABLE_SPECIFIC, selectionMaskArray);

        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        // A return value of nxopen.uistyler.DialogState.EXIT_DIALOG will not be accepted
        // for this callback type. You must continue dialog construction.
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: destructor_cb
    // Following callback is associated with the "dimDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState destructor_cb(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {

            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        // A return value of nxopen.uistyler.DialogState.EXIT_DIALOG will not be accepted
        // for this callback type. You must continue dialog destruction.
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: apply_cb
    // Following callback is associated with the "dimDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState apply_cb(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {
            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        // A return value of nxopen.uistyler.DialogState.EXIT_DIALOG will not be accepted
        // for this callback type. You must respond to your apply button.
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: Hole
    // Following callback is associated with the "dimOption1" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState Hole(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {
            // ---- Enter your callback code here -----
            String[] holeLetters = dimOption1.getItems();
            int holeLetterValue = dimOption1.itemValue();
            String holeLetter = holeLetters[holeLetterValue];

            String[] holeQualitets = dimOptionI1.getItems();
            int holeQualitetValue = dimOptionI1.itemValue();
            String holeQualitet = holeQualitets[holeQualitetValue];

            theUI.nxmessageBox().show("UI Styler", NXMessageBox.DialogType.INFORMATION, holeLetter + holeQualitet);

//            for (String s : holeLetters) {
//                if (e.getStylerItem().isEqualTo(dimOption1))
//                    theUI.nxmessageBox().show("UI Styler", NXMessageBox.DialogType.INFORMATION, s);
//            }
        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: B_1
    // Following callback is associated with the "dimOptionI1" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState B_1(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {
            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: B_2
    // Following callback is associated with the "dimOptionI2" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState B_2(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {
            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: B_3
    // Following callback is associated with the "dimOptionI3" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState B_3(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {


            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: B_4
    // Following callback is associated with the "dimOptionLd1" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState B_4(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {


            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: B_5
    // Following callback is associated with the "dimOptionLd2" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState B_5(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {


            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: B_6
    // Following callback is associated with the "dimOptionLd3" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState B_6(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {


            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: B_7
    // Following callback is associated with the "dimOptionAt1" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState B_7(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {


            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: B_8
    // Following callback is associated with the "dimOptionAt2" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState B_8(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {


            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: B_9
    // Following callback is associated with the "dimOption18" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState B_9(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {


            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }

    //------------------------------------------------------------------------------
    // Callback Name: action_11_act_cb
    // Following callback is associated with the "dimAction11" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState action_11_act_cb(StylerEvent e) throws java.rmi.RemoteException, nxopen.NXException {
        try {


            // ---- Enter your callback code here -----


        } catch (Exception ex) {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }
}
